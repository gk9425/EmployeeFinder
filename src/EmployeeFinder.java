
import Algorithms.*;
import Utility.*;
import java.io.*;
import java.text.*;
import java.util.*;
import javax.swing.*; 
import javax.swing.filechooser.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Kumar
 */
public class EmployeeFinder extends javax.swing.JFrame {
    /*
    Set Global Variables
    path : variable points to data folder
    numSearchRecords: #of records to be displayed in the search //fixed value 10
    */
    
    File selectedFile;
    int numSearchRecords = 10;
    String path = "..\\Data";

    /**
     * Creates new form EmployeeFinder
     */
    public EmployeeFinder(){
        initComponents();
        groupButton();
        initialView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
                
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlHome = new javax.swing.JPanel();
        rdSearch = new javax.swing.JRadioButton();
        rdClassify = new javax.swing.JRadioButton();
        pnlSearch = new javax.swing.JPanel();
        txtSearch = new java.awt.TextField();
        btnFilePicker = new java.awt.Button();
        btnAction = new javax.swing.JButton();
        lblSeach = new javax.swing.JLabel();
        pnlResult = new javax.swing.JPanel();
        lblResult = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        rdResume = new javax.swing.JRadioButton();
        rdJob = new javax.swing.JRadioButton();
        btnAccuracy = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home");
        setAutoRequestFocus(false);

        pnlHome.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee Finder", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 26), java.awt.Color.gray)); // NOI18N

        rdSearch.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        rdSearch.setText("Search Resume");
        rdSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        rdSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdSearchActionPerformed(evt);
            }
        });

        rdClassify.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        rdClassify.setText("Classify Resume");
        rdClassify.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        rdClassify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdClassifyActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        btnFilePicker.setLabel("...");
        btnFilePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilePickerActionPerformed(evt);
            }
        });

        btnAction.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnAction.setText(" Go ");
        btnAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        lblSeach.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
        lblSeach.setText("enter file path or choose a file");

        javax.swing.GroupLayout pnlSearchLayout = new javax.swing.GroupLayout(pnlSearch);
        pnlSearch.setLayout(pnlSearchLayout);
        pnlSearchLayout.setHorizontalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSearchLayout.createSequentialGroup()
                .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlSearchLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFilePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlSearchLayout.createSequentialGroup()
                        .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlSearchLayout.createSequentialGroup()
                                .addGap(203, 203, 203)
                                .addComponent(lblSeach, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlSearchLayout.createSequentialGroup()
                                .addGap(256, 256, 256)
                                .addComponent(btnAction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(68, 68, 68)))
                        .addGap(151, 151, 151)))
                .addGap(30, 30, 30))
        );
        pnlSearchLayout.setVerticalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnFilePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addComponent(lblSeach)
                .addGap(15, 15, 15)
                .addComponent(btnAction)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlResult.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Results", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 18), java.awt.Color.gray)); // NOI18N

        lblResult.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        lblResult.setText("jLabel1");
        lblResult.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblResult.setAutoscrolls(true);

        btnBack.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Accuracy", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 0, 12), java.awt.Color.gray)); // NOI18N

        rdResume.setText("Resume");

        rdJob.setText("JDesc");

        btnAccuracy.setText("Show");
        btnAccuracy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccuracyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rdResume)
                        .addGap(3, 3, 3)
                        .addComponent(rdJob, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btnAccuracy)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdResume)
                    .addComponent(rdJob))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAccuracy, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout pnlResultLayout = new javax.swing.GroupLayout(pnlResult);
        pnlResult.setLayout(pnlResultLayout);
        pnlResultLayout.setHorizontalGroup(
            pnlResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResultLayout.createSequentialGroup()
                .addComponent(btnBack)
                .addGap(18, 18, 18)
                .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3))
        );
        pnlResultLayout.setVerticalGroup(
            pnlResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResultLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(pnlResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addContainerGap(48, Short.MAX_VALUE))
            .addGroup(pnlResultLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addGroup(pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHomeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rdSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdClassify)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlHomeLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(pnlResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlHomeLayout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(pnlSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(145, 145, 145)))
                .addGap(26, 26, 26))
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addGroup(pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdClassify))
                .addGap(18, 18, 18)
                .addComponent(pnlSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdSearchActionPerformed

    private void rdClassifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdClassifyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdClassifyActionPerformed

    /*
    The events fires when the user selects a file.        
    */
    private void btnFilePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilePickerActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PDF", "pdf", "TXT", "txt");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            if( fileChooser.getSelectedFile().getName().toLowerCase().endsWith(".pdf") ||
                fileChooser.getSelectedFile().getName().toLowerCase().endsWith(".txt")){
                selectedFile =  fileChooser.getSelectedFile();
                txtSearch.setText(selectedFile.getAbsolutePath());

            }
            else{
                JOptionPane.showMessageDialog(null, "Invalid file format. File should be in either 'pdf' or 'txt' format", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
        
        
    }//GEN-LAST:event_btnFilePickerActionPerformed

    private void btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPerformed
        // TODO add your handling code here:
        String classLabel = "";
        if(selectedFile == null){
            // check path entered manually
            String filepath = txtSearch.getText();
            selectedFile = Helper.GetFile(filepath);
            
            if(selectedFile != null){
                //check file type
               if(!( (selectedFile.getPath().toLowerCase().endsWith(".pdf")) ||
                 (selectedFile.getPath().toLowerCase().endsWith(".txt")))) {
                // invdlid file type
                   JOptionPane.showMessageDialog(null, "Invalid file format. File should be in either 'pdf' or 'txt' format", "Error", JOptionPane.ERROR_MESSAGE);
                   txtSearch.setText("");
                    selectedFile =  null;
                    return;
                }
                
            }
        }
         boolean fileExist = (selectedFile != null)? true:false;
                                
        if(! fileExist){
             JOptionPane.showMessageDialog(null, "Invalid file path. Kindly choose another file.", "Error", JOptionPane.ERROR_MESSAGE);
             txtSearch.setText("");
        }
        else{
            String actionType = (rdClassify.isSelected())?"Classify":"Search";
            ArrayList<String> fileTerms = getFileTermList();
            if(fileTerms.size() > 0){
                
                pnlSearch.setVisible(false);
                pnlResult.setVisible(true);
            
                NaiveBayes nbObject = new NaiveBayes(actionType, path);
                classLabel = nbObject.classify(fileTerms, actionType.equals("Classify"));
                
                    if(actionType.equals("Search")){

                        Tfidf tfIdfRank = new Tfidf(path);
                        ArrayList<RankedResult> result = tfIdfRank.rankedResult(fileTerms, classLabel, numSearchRecords);
                        ShowSearchResult(result);
                    }
                    else{   
                        LinkedHashMap<String, Double>detailResult = nbObject.getResultDetails();
                        ShowClassificationResult(detailResult); 
                    }                    
                }
            else{
                JOptionPane.showMessageDialog(null, "File is empty. Kindly choose another file.", "Error", JOptionPane.ERROR_MESSAGE);
                txtSearch.setText("");
                selectedFile =  null;
            }
            setRadioEnDs(false);
        }
        
    }//GEN-LAST:event_btnActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        pnlSearch.setVisible(true);
        pnlResult.setVisible(false);
        initialView();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAccuracyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccuracyActionPerformed
        // TODO add your handling code here:

        String category = (rdResume.isSelected())? "Classify" : "Search" ; 
        
        NaiveBayes nbObject = new NaiveBayes(category, path);
        HashMap <String,HashMap<String, Integer>> cMatrix = nbObject.getAccuracy(path, category);
        ShowAccuracyResult(cMatrix);

    }//GEN-LAST:event_btnAccuracyActionPerformed
       
    //helper functions
    
    private void initialView(){
       //event - default radio selected
        pnlResult.setVisible(false);
        txtSearch.setText("");
        selectedFile = null;
        rdSearch.doClick();
        clearResultPanel();
        rdResume.doClick();
        setRadioEnDs(true);
    }
    
    private void groupButton(){
       ButtonGroup bg1 = new ButtonGroup(); 
       bg1.add(rdClassify);
       bg1.add(rdSearch);       
       
       ButtonGroup bg2 = new ButtonGroup();
       bg2.add(rdResume);
       bg2.add(rdJob);  
    }
    
    private void clearResultPanel(){
        //clear table rows         
        lblResult.setText("");
    }
    
    private void setRadioEnDs(boolean flag){
       rdClassify.setEnabled(flag);
       rdSearch.setEnabled(flag); 
      
    }
    
    private void ShowSearchResult(ArrayList<RankedResult> result ){
        StringBuilder sb = new StringBuilder();//%-15s %-40s %s", "Rank", "Resume", "Score"
        sb.append("<html><b>Search Results:</b><br><br>");
        sb.append("<table><tr><td><b>Rank</b></td><td></td><td><b>Resume</b></td><td></td><td><b>Score</b></td></tr>"); //<td>Match</td>
        for(RankedResult item : result){
         //sb.append(String.format("%-15s %-40s %s", item.Rank, item.DocName,item.Score));
         sb.append("<tr><td>").append(item.Rank).append("</td><td></td><td>").append(item.DocName).append("</td><td></td><td>").append( new DecimalFormat(".######").format(item.Score) ).append("</td></tr>"); //<td></td>+ item.GetMatchedTerms()+"         
        }
        sb.append("</table></html>");
        lblResult.setText(sb.toString());
    }
    
    private void ShowClassificationResult(LinkedHashMap<String, Double> detailResult){
        int counter = 1;
        StringBuilder sb = new StringBuilder();
        sb.append("<html><b>Classification Result </b>: <br><br>");
        sb.append("<table><tr><td><b>Seq.</b></td><td></td><td><b>Class</b></td><td></td><td><b>Probability</b></td></tr>");
        for(Map.Entry<String, Double> item : detailResult.entrySet()){
            sb.append("<tr><td>").append(counter).append("</td><td></td><td>").append(item.getKey()).append("</td><td></td><td>").append(item.getValue()).append("</td></tr>");
        counter++;
        }
        sb.append("</html>");
        lblResult.setText(sb.toString());        
    }
    
    private void ShowAccuracyResult(HashMap <String,HashMap<String, Integer>> cMatrix){
               
        Double accuracy = CalculateAccuracy(cMatrix);
        StringBuilder sb  = new StringBuilder();      
        sb.append("<html>").append("<b>Accuracy :</b> ").append(accuracy).append("<br><br>");
        sb.append("<b>Confusion Matrix</b> :").append("<br><br>");
        sb.append("<table><tr><td></td>");

        for(Map.Entry ky : cMatrix.entrySet()){
            sb.append("<td>").append(ky.getKey()).append("</td><td></td>");
         }
        sb.append("</tr>");
        
        // rows creation logic
        Set<String> keys2 = cMatrix.keySet();
        
        //loop 1
        for(Map.Entry matrix : cMatrix.entrySet() ){             
            sb.append("<tr><td>").append(matrix.getKey()).append("</td>");            
                for(String s : keys2){
                int value = 0;    
                    if(((HashMap<String, Integer>)matrix.getValue()).containsKey(s)){ 
                        value = ((HashMap<String, Integer>)matrix.getValue()).get(s);
                    }
                 sb.append("<td>").append(value).append("</td><td></td>");
                    
                }              
            sb.append("</tr>");
        }
        sb.append("</table></html>");
        lblResult.setText( sb.toString());
    }
    
    private Double CalculateAccuracy(HashMap <String,HashMap<String, Integer>> cMatrix){
        
        int correct = 0;
        int incorrect = 0;
        
        List<Map.Entry<String, HashMap<String, Integer>>> cMatrixRows = new ArrayList<>(cMatrix.entrySet());
        for(Map.Entry<String,HashMap<String, Integer>> cMatrixRow : cMatrixRows){
            String originalClass= cMatrixRow.getKey(); 
            List<Map.Entry<String, Integer>> cells = new ArrayList<>(cMatrixRow.getValue().entrySet());
            for( Map.Entry<String, Integer> cell : cells){
               if(cell.getKey().equals(originalClass)){
                  correct +=  cell.getValue();
               }
               else{
                   incorrect += cell.getValue();
               }
           }
         }
        Double accuracy  = (correct * 1.0)/((correct + incorrect)*1.0);
        return accuracy;
    }
    
    private ArrayList<String> getFileTermList(){
        
        String fileExt = (selectedFile.getName().toLowerCase().contains("pdf"))? "pdf" :"txt";
        ArrayList<String> fileTerms  = (fileExt.equals("pdf")) ? Helper.GetPdfFileContentAsList(selectedFile)
        : Helper.GetFileContentAsList(selectedFile.getPath()); 
        
        ArrayList<String> stopWords = Helper.GetStopWords();
        fileTerms.removeAll(stopWords);
        
        return fileTerms;
        
    }
    

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
            new EmployeeFinder().setVisible(true);
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccuracy;
    private javax.swing.JButton btnAction;
    private javax.swing.JButton btnBack;
    private java.awt.Button btnFilePicker;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblResult;
    private javax.swing.JLabel lblSeach;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlResult;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JRadioButton rdClassify;
    private javax.swing.JRadioButton rdJob;
    private javax.swing.JRadioButton rdResume;
    private javax.swing.JRadioButton rdSearch;
    private java.awt.TextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
